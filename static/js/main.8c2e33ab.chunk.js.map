{"version":3,"sources":["components/backgrounds/BG1.png","components/backgrounds/BG2.png","components/backgrounds/BG3.png","components/backgrounds/BG4.png","components/backgrounds/BG5.png","api/ws.js","actions/util.js","actions/game.js","actions/global.js","actions/player.js","reducers/game.js","actions/lobby.js","reducers/lobby.js","reducers/cards.js","reducers/global.js","reducers/index.js","store.js","api/events.js","api/api.js","api/index.js","components/lobby/index.js","components/lobby/lobby.js","components/game/grid/index.js","components/game/shop.js","components/game/actions.js","components/game/minimap.js","components/game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MessageEvent","Event","url","ws","initPromise","reconnect","api_ws","init","send","data","action","console","error","JSON","stringify","onEvent","listen","WebSocket","Promise","resolve","reject","onopen","onmessage","handleMessage","message","parse","e","broadcast","autoboundEvents","bindToEvent","constName","eventName","handler","event","Object","objectSpread","store","dispatch","bindEvent","partial","handleEvent","type","CARD_REVEALED","JOINED_GAME","CARD_DRAWN_TO_SHOP","CARD_DISCARDED","TURN_CHANGED","ROOM_BUILT","HELLO","NAME_CHANGED","ACTIONS_CHANGED","SELECT_CARD","defaultState","inGame","drawPileSize","players","sacrifices","seed","castles","shop","playerCards","disasters","discardPile","currentTurn","roundTurn","actions","selectedCard","LOBBY_SNAPSHOT","PLAYER_JOINED","PLAYER_LEAVE","PLAYER_SLOT_CHANGED","STATUS_CHANGED","ALL_READY","id","isReady","allReady","playerStatus","knownCards","100","101","playerId","name","playerNames","combineReducers","game","state","log","snapshot","forEach","castle","player","toConsumableArray","push","card","discardPileSize","filter","castleOwner","node","defineProperty","nodes","concat","lobby","ready","slots","slot","splice","indexOf","settings","from","to","status","cards","asset","keys","deck","global","sessionStorage","token","reconnectionToken","createStore","reducers","applyMiddleware","thunk","LobbyCreatedEvent","onLobbyCreated","LobbyJoinedEvent","onLobbyJoined","LobbyFailedEvent","onLobbyFailed","GameStartingEvent","onGameStarting","GameJoinedEvent","onGameJoined","wasAllReady","Array","isArray","map","wasAutoDispatched","dispatchEvent","reason","startsWith","handleDisconnect","playerLeave","isAllReady","handleActions","events","Events","_x","_send","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","stop","createLobby","_createLobby","_callee2","_context2","abrupt","once","joinLobby","_x2","_joinLobby","_callee3","_context3","takeSlot","_x3","api_takeSlot","_callee4","_context4","setReady","_x4","_setReady","_callee5","_context5","startGame","_x5","_startGame","_callee6","_context6","setName","_x6","_setName","_callee7","_context7","_x7","_reconnect","_callee8","_context8","API","LobbyMenu","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","setState","target","value","onNewGame","bind","assertThisInitialized","onJoinGame","lobbyId","props","history","react_default","createElement","Typography_default","Button_default","onClick","variant","TextField_default","label","onChange","Component","mapToProps","obstruction","withStyles","theme","root","connect","LobbyView","renderPlayerSlot","toggleReady","newProps","_this2","unlisten","Collector","timeout","paramId","match","params","_this3","dist","condition","render","Fragment","Close_default","Check_default","CircularProgress_default","size","key","GridController","renderRow","renderCell","sendAction","effects","minX","maxX","minY","maxY","grid","Math","min","x","max","y","width","height","rows","row","i","isActionable","reduce","memo","val","room","className","classes","display","Shop","renderCard","selectCard","isClickable","disabled","ActionBar","renderAction","Minimap","backgroundImage","backgroundImage1","backgroundImage2","backgroundImage3","backgroundImage4","backgroundImage5","random","GameComponent","game_shop","game_grid","minimap","minHeight","backgroundSize","App","HashRouter","Switch","Route","exact","path","Redirect","component","GameView","Boolean","window","location","hostname","ReactDOM","es","CssBaseline_default","src_App_0","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c2e33ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BG1.5b931fc6.png\";","module.exports = __webpack_public_path__ + \"static/media/BG2.4ca3ca0d.png\";","module.exports = __webpack_public_path__ + \"static/media/BG3.bb846d3d.png\";","module.exports = __webpack_public_path__ + \"static/media/BG4.619dd64d.png\";","module.exports = __webpack_public_path__ + \"static/media/BG5.b1217cd4.png\";","import Event from 'geval/event';\n\nconst MessageEvent = Event();\nconst url = 'ws://disastles.herokuapp.com/api/ws';\n\nvar ws = null;\nvar initPromise = null;\nvar currentID = 0;\n\nreconnect();\n\nexport default {\n  init: init,\n  send: send,\n  reconnect: reconnect,\n  onEvent: MessageEvent.listen\n};\n\nfunction init () {\n  return initPromise;\n}\n\nfunction send (data) {\n  if (!data.action) {\n    console.error('No action specified in', data);\n  }\n  ws.send(JSON.stringify(data));\n}\n\nfunction reconnect () {\n  ws = new WebSocket(url);\n\n  initPromise = new Promise((resolve, reject) => {\n    ws.onopen = resolve;\n  });\n\n  ws.onmessage = handleMessage;\n}\n\nfunction handleMessage (message) {\n  try {\n    var data = JSON.parse(message.data);\n  } catch (e) {\n    console.error(e.message || e);\n    console.error('Failed to parse server message: ' + message.data);\n    console.error(message);\n  }\n  MessageEvent.broadcast(data);\n}\n","import Event from 'geval/event';\nimport { partial } from 'ap';\nimport store from '../store';\n\nconst autoboundEvents = {};\n\nexport function bindToEvent (constName, eventName) {\n  bindEvent(eventName, partial(handleEvent, constName, eventName));\n}\n\nexport function dispatchEvent (event) {\n  if (autoboundEvents[event.event]) {\n    autoboundEvents[event.event].broadcast(event);\n    return true;\n  }\n  return false;\n}\n\nfunction handleEvent (constName, eventName, event) {\n  return {\n    type: constName,\n    data: event\n  };\n}\n\nfunction bindEvent (eventName, handler) {\n  if (!autoboundEvents[eventName]) {\n    autoboundEvents[eventName] = Event();\n  }\n  autoboundEvents[eventName].listen((event) => {\n    event = {...event};\n    delete event.event;\n    store.dispatch(handler(event));\n  });\n}\n","import { bindToEvent } from './util';\n\nexport const CARD_REVEALED = 'CARD_REVEALED';\nexport const JOINED_GAME = 'JOINED_GAME';\nexport const CARD_DRAWN_TO_SHOP = 'CARD_DRAWN_TO_SHOP';\nexport const CARD_DISCARDED = 'CARD_DISCARDED';\nexport const TURN_CHANGED = 'TURN_CHANGED';\nexport const ROOM_BUILT = 'ROOM_BUILT';\n\nbindToEvent(JOINED_GAME, 'JoinedGame');\nbindToEvent(CARD_DRAWN_TO_SHOP, 'CardDrawnToShop');\nbindToEvent(CARD_DISCARDED, 'CardDiscarded');\nbindToEvent(TURN_CHANGED, 'TurnChanged');\nbindToEvent(CARD_REVEALED, 'CardRevealed');\nbindToEvent(ROOM_BUILT, 'RoomBuilt');\n\nexport function joinedGame (data) {\n  return {\n    type: JOINED_GAME,\n    data\n  };\n}\n","import { bindToEvent } from './util';\n\nexport const HELLO = 'HELLO';\nexport const NAME_CHANGED = 'NAME_CHANGED';\nexport const ACTIONS_CHANGED = 'ACTIONS_CHANGED';\n\nbindToEvent(HELLO, 'Hello');\nbindToEvent(ACTIONS_CHANGED, 'ActionsChanged');\n\nexport function nameChanged (data) {\n  return {\n    type: NAME_CHANGED,\n    data\n  };\n}\n","export const SELECT_CARD = 'SELECT_CARD';\n\nexport function selectCard (card) {\n  return {\n    type: SELECT_CARD,\n    card\n  };\n}\n","import {\n  JOINED_GAME,\n  CARD_DRAWN_TO_SHOP,\n  CARD_DISCARDED,\n  ROOM_BUILT,\n  TURN_CHANGED\n} from '../actions/game';\n\nimport {\n  ACTIONS_CHANGED\n} from '../actions/global';\n\nimport {\n  SELECT_CARD\n} from '../actions/player';\n\nconst defaultState = {\n  inGame: false,\n  drawPileSize: 0,\n  players: [],\n  sacrifices: [],\n  seed: 0,\n  castles: {},\n\n  shop: [],\n  playerCards: [],\n  disasters: [],\n  discardPile: [],\n\n  currentTurn: null,\n  roundTurn: null,\n  actions: [ ],\n  selectedCard: null\n};\n\nexport default function reduce (state, action) {\n  if (!state) {\n    state = defaultState;\n  }\n\n  switch (action.type) {\n    case ACTIONS_CHANGED:\n      state = {...state,\n        actions: action.data.actions\n      };\n      break;\n    case JOINED_GAME:\n      console.log(action.data);\n      state = {...state,\n        inGame: true,\n        drawPileSize: action.data.snapshot.drawPileSize,\n        players: action.data.snapshot.players,\n        sacrifices: action.data.snapshot.sacrifices,\n        seed: action.data.snapshot.seed,\n        castles: {},\n\n        shop: action.data.snapshot.shop,\n        playerCards: action.data.snapshot.playerCards,\n        disasters: action.data.snapshot.disasters,\n        discardPile: action.data.snapshot.discardPile,\n\n        currentTurn: action.data.snapshot.currentTurn,\n        roundTurn: action.data.snapshot.roundTurn,\n      }\n      action.data.snapshot.castles.forEach(function (castle) {\n        state.castles[castle.player] = castle;\n      });\n      break;\n    case CARD_DRAWN_TO_SHOP:\n      console.log('Added to shop!');\n      state = {...state,\n        shop: [...state.shop],\n        drawPileSize: action.data.drawPileSize\n      };\n      state.shop.push(action.data.card);\n      break;\n    case CARD_DISCARDED:\n      console.log('card discarded', action);\n      state = {...state,\n        discardPile: [...state.discardPile],\n        discardPileSize: action.data.discardPileSize,\n        shop: [...state.shop]\n      };\n      state.discardPile.push({\n        card: action.data.card\n      });\n      state.shop = state.shop.filter(function (card) {\n        return card !== action.data.card;\n      });\n      break;\n    case SELECT_CARD:\n      state = {...state,\n        selectedCard: action.card\n      };\n      break;\n    case ROOM_BUILT:\n      console.log(action.data);\n      let player = action.data.castleOwner;\n      let node = {...action.data};\n      delete node.castleOwner;\n\n      state = {...state,\n        castles: {...state.castles,\n          [player]: {...state.castles[player],\n            nodes: [...state.castles[player].nodes, node]\n          }\n        },\n        shop: [...state.shop]\n      };\n      state.shop = state.shop.filter(function (card) {\n        return card !== node.card;\n      });\n      break;\n    case TURN_CHANGED:\n      console.log('turn change', action);\n      break;\n  }\n\n  return state;\n}\n","\nexport const LOBBY_SNAPSHOT = 'LOBBY_SNAPSHOT';\nexport const PLAYER_JOINED = 'PLAYER_JOINED';\nexport const PLAYER_LEAVE = 'PLAYER_LEAVE';\nexport const PLAYER_SLOT_CHANGED = 'PLAYER_SLOT_CHANGED';\nexport const STATUS_CHANGED = 'STATUS_CHANGED';\nexport const ALL_READY = 'ALL_READY';\n\nexport function joinLobby (snapshot) {\n  return {\n    type: LOBBY_SNAPSHOT,\n    snapshot\n  };\n}\n\nexport function playerJoined (player) {\n  return {\n    type: PLAYER_JOINED,\n    player\n  };\n}\n\nexport function playerLeave (data) {\n  return {\n    type: PLAYER_LEAVE,\n    data\n  };\n}\n\nexport function playerSlotChange (slotData) {\n  return {\n    type: PLAYER_SLOT_CHANGED,\n    data: slotData\n  };\n}\n\nexport function statusChanged (status) {\n  return {\n    type: STATUS_CHANGED,\n    ...status\n  };\n}\n\nexport function allReady (allReady) {\n  return {\n    type: ALL_READY,\n    allReady\n  };\n}\n","import {\n  LOBBY_SNAPSHOT,\n  PLAYER_JOINED,\n  PLAYER_LEAVE,\n  PLAYER_SLOT_CHANGED,\n  STATUS_CHANGED,\n  ALL_READY\n} from '../actions/lobby';\nimport {\n  HELLO\n} from '../actions/global';\n\nconst defaultState = {\n  id: null,\n  isReady: false,\n  allReady: false,\n  playerStatus: {},\n  players: []\n};\n\nexport default function reduce (state, action) {\n  if (!state) {\n    state = defaultState;\n  }\n\n  switch (action.type) {\n    case HELLO:\n      state = {...state,\n        playerId: action.data.playerId,\n        playerStatus: {...state.playerStatus,\n          [action.data.playerId]: {\n            ready: false\n          }\n        }\n      };\n      break;\n    case PLAYER_JOINED:\n      state = {...state,\n        playerStatus: {...state.playerStatus,\n          [action.player.player]: {\n            ready: false\n          }\n        },\n        players: [...state.players, action.player.player],\n        slots: [...state.slots]\n      };\n      state.slots[action.player.slot] = action.player.player;\n      break;\n    case PLAYER_LEAVE:\n      state = {...state,\n        playerStatus: {...state.playerStatus},\n        players: [...state.players],\n        slots: [...state.slots]\n      };\n      state.slots[action.data.slot] = null;\n      state.players.splice(state.players.indexOf(action.data.player), 1);\n      delete state.playerStatus[action.data.player];\n      break;\n    case LOBBY_SNAPSHOT:\n      console.log('snapshot', action);\n      state = {...state,\n        players: action.snapshot.players,\n        id: action.snapshot.id,\n        settings: action.snapshot.settings,\n        slots: action.snapshot.slots,\n        playerStatus: {}\n      };\n      state.players.forEach(function (playerId) {\n        state.playerStatus[playerId] = {\n          ready: false\n        };\n      });\n      break;\n    case PLAYER_SLOT_CHANGED:\n      state = {...state,\n        slots: [...state.slots]\n      };\n      state.slots[action.data.from] = null;\n      state.slots[action.data.to] = action.data.player;\n      break;\n    case STATUS_CHANGED:\n      state = {...state,\n        playerStatus: {...state.playerStatus,\n          [action.player]: {\n            ready: action.ready,\n            state: action.status\n          }\n        }\n      };\n      if (action.player === state.playerId) {\n        state.isReady = action.ready;\n      }\n      break;\n    case ALL_READY:\n      state = {...state,\n        allReady: action.allReady\n      };\n      break;\n  }\n\n  return state;\n}\n","import {\n  CARD_REVEALED,\n  JOINED_GAME\n} from '../actions/game';\n\nconst defaultState = {\n  knownCards: {\n    100: 'asdf',\n    101: 'fdsa'\n  }\n};\n\nexport default function reduce (state, action) {\n  if (!state) {\n    state = defaultState;\n  }\n\n  switch (action.type) {\n    case CARD_REVEALED:\n      state = {...state,\n        knownCards: {...state.knownCards,\n          [action.data.card]: action.data.asset\n        }\n      };\n      break;\n    case JOINED_GAME:\n      console.log(action.data);\n      state = {...state,\n        knownCards: {...state.knownCards}\n      };\n\n      Object.keys(action.data.snapshot.deck).forEach(function (name) {\n        let card = action.data.snapshot.deck[name];\n        if (card.asset) {\n          state.knownCards[name] = card.asset;\n        }\n      });\n      break;\n  }\n\n  return state;\n}\n","import {\n  LOBBY_SNAPSHOT,\n  PLAYER_LEAVE\n} from '../actions/lobby';\n\nimport {\n  HELLO,\n  NAME_CHANGED,\n  ACTIONS_CHANGED\n} from '../actions/global';\n\nimport name from 'american-sounding-names';\n\nconst defaultState = {\n  playerId: 'test',\n  name: name(),\n  playerNames: {}\n};\n\nexport default function reduce (state, action) {\n  if (!state) {\n    state = defaultState;\n  }\n\n  switch (action.type) {\n    case ACTIONS_CHANGED:\n      state = {...state,\n        actions: action.data.actions\n      };\n      break;\n    case HELLO:\n      console.log('hello', action);\n      sessionStorage.token = action.data.reconnectionToken;\n      state = {...state,\n        playerId: action.data.playerId,\n        reconnectionToken: action.data.reconnectionToken,\n        playerNames: {...state.playerNames,\n          [action.data.playerId]: state.name\n        }\n      };\n      break;\n    case LOBBY_SNAPSHOT:\n      state = {...state,\n        playerNames: {...state.playerNames}\n      };\n      action.snapshot.players.forEach(function (player) {\n        console.log(player);\n        state.playerNames[player.id] = player.name;\n      });\n      break;\n    case NAME_CHANGED:\n      state = {...state,\n        playerNames: {...state.playerNames,\n          [action.data.player]: action.data.name\n        }\n      };\n      break;\n    case PLAYER_LEAVE:\n      state = {...state,\n        playerNames: {...state.playerNames}\n      };\n      delete state.playerNames[action.data.player];\n      break;\n  }\n\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport game from './game';\nimport lobby from './lobby';\nimport cards from './cards';\nimport globalReducer from './global';\n\nexport default combineReducers({\n  game, lobby, cards,\n  global: globalReducer\n});\n","import { createStore, applyMiddleware } from 'redux'\nimport reducers from './reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store;\n","import Event from 'geval/event';\nimport ws from './ws';\nimport store from '../store';\nimport {\n  joinLobby,\n  playerJoined,\n  playerLeave,\n  playerSlotChange,\n  statusChanged,\n  allReady\n} from '../actions/lobby';\nimport {\n  nameChanged\n} from '../actions/global';\nimport { dispatchEvent } from '../actions/util';\n\nconst LobbyCreatedEvent = Event();\nexport const onLobbyCreated = LobbyCreatedEvent.listen;\nconst LobbyJoinedEvent = Event();\nexport const onLobbyJoined = LobbyJoinedEvent.listen;\nconst LobbyFailedEvent = Event();\nexport const onLobbyFailed = LobbyFailedEvent.listen;\nconst GameStartingEvent = Event();\nexport const onGameStarting = GameStartingEvent.listen;\nconst GameJoinedEvent = Event();\nexport const onGameJoined = GameJoinedEvent.listen;\n\nvar wasAllReady = false;\n\nws.onEvent(function handleEvent (event) {\n  if (Array.isArray(event)) {\n    return event.map(handleEvent);\n  }\n  let wasAutoDispatched = dispatchEvent(event);\n\n  switch (event.event) {\n    // global\n    case 'NameChanged':\n      store.dispatch(nameChanged(event));\n      break;\n    case 'Disconnect':\n      handleDisconnect(event);\n      ws.reconnect();\n      break;\n    case 'Ping':\n      break;\n    // lobby\n    case 'LobbyCreated':\n      LobbyCreatedEvent.broadcast(event.id);\n      break;\n    case 'JoinedLobby':\n      store.dispatch(joinLobby(event.snapshot));\n      LobbyJoinedEvent.broadcast(event.snapshot);\n      break;\n    case 'PlayerDisconnected':\n      delete event.event;\n      store.dispatch(playerLeave(event));\n      break;\n    case 'PlayerJoined':\n      delete event.event;\n      store.dispatch(playerJoined(event));\n      break;\n    case 'SlotSwitched':\n      delete event.event;\n      store.dispatch(playerSlotChange(event));\n      break;\n    case 'ActionsChanged':\n      handleActions(event);\n      break;\n    case 'StatusChanged':\n      delete event.event;\n      store.dispatch(statusChanged(event));\n      break;\n    // game\n    case 'GameStarting':\n      GameStartingEvent.broadcast({});\n      break;\n    case 'JoinedGame':\n      GameJoinedEvent.broadcast({});\n      break;\n    //   delete event.event;\n    //   store.dispatch(joinedGame(event));\n    //   break;\n    // default for debugging\n    default:\n      if (wasAutoDispatched) {\n        break;\n      }\n      console.log('Unknown event type:', event.event);\n      console.log(event);\n      break;\n  }\n});\n\nfunction handleDisconnect (event) {\n  if (event.reason.startsWith('lobby does not exist')) {\n    LobbyFailedEvent.broadcast(404);\n    return;\n  }\n  console.log('Unknown disconnect reason:', event.reason);\n}\n\nfunction handleActions (event) {\n  var isAllReady = false;\n\n  event.actions.map(function (action) {\n    switch (action.action) {\n      case 'StartGame':\n        isAllReady = true;\n        break;\n    }\n  });\n\n  console.log(event.actions);\n\n  if (wasAllReady !== isAllReady) {\n    wasAllReady = isAllReady;\n    store.dispatch(allReady(isAllReady));\n  }\n}\n","import ws from './ws';\nimport * as Events from './events';\n\nexport const events = Events;\n\nexport async function send (action) {\n  await ws.init();\n  ws.send(action);\n}\n\nexport async function createLobby () {\n  await ws.init();\n  return new Promise((resolve, reject) => {\n    once(Events.onLobbyCreated, resolve);\n    ws.send({\n      action: 'CreateLobby'\n    });\n  });\n}\n\nexport async function joinLobby (id) {\n  await ws.init();\n  return new Promise((resolve, reject) => {\n    once(Events.onLobbyJoined, resolve);\n    ws.send({\n      action: 'JoinLobby',\n      id\n    });\n  });\n}\n\nexport async function takeSlot (slot) {\n  await ws.init();\n  return new Promise((resolve, reject) => {\n    once(Events.onLobbyJoined, resolve);\n    ws.send({\n      action: 'TakeSlot',\n      slot: slot\n    });\n  });\n}\n\nexport async function setReady (ready) {\n  await ws.init();\n  ws.send({\n    action: 'SetStatus',\n    status: '',\n    ready\n  });\n}\n\nexport async function startGame (ready) {\n  await ws.init();\n  ws.send({\n    action: 'StartGame'\n  });\n}\n\nexport async function setName (name) {\n  await ws.init();\n  ws.send({\n    action: 'SetName',\n    name\n  });\n}\n\nexport async function reconnect (token) {\n  await ws.init();\n  ws.send({\n    action: 'Reconnect',\n    token\n  });\n}\n\nfunction once (listen, handler) {\n  var stop = listen(function () {\n    stop();\n    handler.apply(this, arguments);\n  });\n\n  return stop;\n}\n","// https://disastles.herokuapp.com/\nimport * as API from './api';\nimport './events';\n\nexport default API;\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport obstruction from 'obstruction';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport API from '../../api';\n\nconst styles = theme => ({\n  root: {\n  }\n});\n\nclass LobbyMenu extends Component {\n  constructor () {\n    super();\n\n    this.onNewGame = this.onNewGame.bind(this);\n    this.onJoinGame = this.onJoinGame.bind(this);\n\n    this.state = {\n      lobbyId: ''\n    };\n  }\n  async onNewGame () {\n    console.log('Start new game or something...');\n\n    var id = await API.createLobby();\n    await API.joinLobby(id);\n\n    this.props.history.push('/lobby/' + id);\n  }\n  async onJoinGame () {\n    this.props.history.push('/lobby/' + this.state.lobbyId);\n  }\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n  render () {\n    return (\n      <div>\n        <Typography>This is a lobby view!</Typography>\n        <Button onClick={ this.onNewGame } variant='outlined'>\n          New Game\n        </Button>\n        <TextField\n          id=\"lobby-id\"\n          label=\"Lobby ID\"\n          value={ this.state.lobbyId }\n          onChange={this.handleChange('lobbyId')}\n        />\n        <Button onClick={ this.onJoinGame } variant='outlined'>\n          Join Game\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapToProps = obstruction({\n});\n\nexport default withStyles(styles)(connect(mapToProps)(LobbyMenu));\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport obstruction from 'obstruction';\nimport { If } from 'react-extras';\nimport { partial } from 'ap';\nimport Collector from 'collect-methods';\nimport { timeout } from 'thyming';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport Typography from '@material-ui/core/Typography';\n\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport API from '../../api';\n\nconst styles = theme => ({\n  root: {\n  }\n});\n\nclass LobbyView extends Component {\n  constructor (props) {\n    super();\n\n    this.state = {\n      name: props.name\n    };\n\n    this.renderPlayerSlot = this.renderPlayerSlot.bind(this);\n    this.takeSlot = this.takeSlot.bind(this);\n    this.toggleReady = this.toggleReady.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  componentWillReceiveProps (newProps) {\n    console.log('props', newProps);\n    if (newProps.name !== this.props.name) {\n      this.setState({\n        name: newProps.name\n      });\n    }\n  }\n\n  componentDidMount () {\n    this.unlisten = Collector();\n    this.unlisten(API.events.onLobbyFailed(() => this.props.history.push('/lobby')));\n    this.unlisten(API.events.onGameJoined(() => this.props.history.push('/game/' + this.props.reconnectionToken)));\n    this.unlisten(timeout(() => API.setName(this.state.name), 1000));\n    if (!this.props.lobbyId) {\n      let paramId = this.props.match.params.id;\n      console.log('We\\'re not in a lobby yet!', paramId, this.state.name);\n      API.joinLobby(paramId);\n    }\n  }\n\n  componentWillUnmount () {\n    this.unlisten();\n  }\n\n  async takeSlot (slot) {\n    await API.takeSlot(slot)\n  }\n\n  toggleReady () {\n    API.setReady(!this.props.isReady);\n  }\n\n  startGame () {\n    API.startGame();\n  }\n\n  render () {\n    return (\n      <div>\n        <If condition={ !!this.props.lobbyId }\n          render={ () =>\n            <React.Fragment>\n              <Typography variant=\"h3\">{ this.props.lobbyId }</Typography>\n              <Typography>You're in a lobby!</Typography>\n              { this.props.players.map(this.renderPlayerSlot) }\n              <br />\n              <Button variant=\"contained\" onClick={ this.toggleReady }>\n                <If condition={ !this.props.isReady } render={ () =>\n                  <React.Fragment>\n                    <CloseIcon /> Not Ready\n                  </React.Fragment>\n                } />\n                <If condition={ !!this.props.isReady } render={() =>\n                  <React.Fragment>\n                    <CheckIcon /> Ready!\n                  </React.Fragment>\n                } />\n              </Button>\n              <If condition={ !!this.props.allReady } render={() =>\n                <Button variant=\"contained\" onClick={ this.startGame }>\n                  Start Game!\n                </Button>\n              } />\n            </React.Fragment>\n          } />\n        <If condition={ !this.props.lobbyId }\n          render={ () =>\n            <React.Fragment>\n              <br />\n              <br />\n              <center>\n                <CircularProgress size={ 128 }/>\n                <Typography variant=\"subheading\">\n                  Joining lobby...\n                </Typography>\n              </center>\n            </React.Fragment>\n          } />\n      </div>\n    );\n  }\n\n  renderPlayerSlot (player, slot) {\n    if (!player) {\n      return (\n        <div key={ slot }>\n          Player { slot + 1 }:\n          <Button onClick={ partial(this.takeSlot, slot) }>Take slot</Button>\n        </div>\n      );\n    } else {\n      var name = this.props.playerNames[player] || player;\n      return (\n        <div key={ slot }>\n          Player { slot + 1 }: { name }\n        </div>\n      );\n    }\n  }\n}\n\nconst mapToProps = obstruction({\n  reconnectionToken: 'global.reconnectionToken',\n  lobbyId: 'lobby.id',\n  players: 'lobby.slots',\n  isReady: 'lobby.isReady',\n  allReady: 'lobby.allReady',\n  name: 'global.name',\n  playerNames: 'global.playerNames'\n});\n\nexport default withStyles(styles)(connect(mapToProps)(LobbyView));\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport obstruction from 'obstruction';\nimport { partial } from 'ap';\n\nimport { If } from 'react-extras';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport API from '../../../api';\n\nconst styles = theme => ({\n  root: {\n  },\n  node: {\n    display: 'inline-block',\n    width: 200,\n    height: 200,\n  }\n});\n\nclass GridController extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      nodes: [],\n      actions: []\n    };\n\n    this.renderRow = this.renderRow.bind(this);\n    this.renderCell = this.renderCell.bind(this);\n    this.sendAction = this.sendAction.bind(this);\n  }\n\n  componentWillReceiveProps (newProps) {\n    console.log('Getting new castles', newProps);\n    this.setState({...newProps.castles[newProps.playerId || 'test'],\n      actions: newProps.actions.filter((action) => {\n        if (action.action === 'BuildRoom') {\n          return action.card === newProps.selectedCard;\n        }\n        return true;\n      })\n    });\n  }\n\n  async sendAction (action) {\n    action = {...action,\n      effects: []\n    };\n    API.send(action);\n  }\n\n  render () {\n    console.log(this.state.actions);\n    let minX = 0;\n    let maxX = 0;\n    let minY = 0;\n    let maxY = 0;\n    let grid = {};\n    this.state.nodes.forEach(function (node) {\n      minX = Math.min(minX, node.x);\n      maxX = Math.max(maxX, node.x);\n      minY = Math.min(minY, node.y);\n      maxY = Math.max(maxY, node.y);\n\n      if (!grid[node.x]) {\n        grid[node.x] = {};\n      }\n      grid[node.x][node.y] = node;\n    });\n\n    minX--;\n    maxX++;\n    minY--;\n    maxY++;\n\n    let width = maxX - minX + 1;\n    let height = maxY - minY + 1;\n    let rows = [];\n\n    for (let y = 0; y < height; ++y) {\n      let row = [];\n      for (let x = 0; x < width; ++x) {\n        if (grid[x + minX]) {\n          row.push(grid[x + minX][y + minY]);\n        } else {\n          row.push(null);\n        }\n      }\n      rows.push(row);\n    }\n\n    console.log(grid, width, height, rows);\n\n    return (\n      <div>\n        { rows.map(partial(this.renderRow, minX, minY)) }\n      </div>\n    );\n  }\n\n  renderRow (minX, minY, row, i) {\n    let y = i + minY;\n    return (\n      <div key={ y }>\n        { row.map(partial(this.renderCell, y, minX)) }\n      </div>\n    );\n  }\n\n  renderCell (y, minX, node, i) {\n    let x = i + minX;\n    let key = x + ':' + y;\n    let isActionable = this.state.actions.reduce((memo, val) => {\n      if (val.x === x && val.y === y) {\n        return val;\n      }\n      if (node && val.room === node.card) {\n        return val;\n      }\n      return memo;\n    }, false);\n\n    if (!isActionable && node) {\n      isActionable = this.props.actions.reduce((memo, val) => {\n        if (val.card === node.card) {\n          return val;\n        }\n        return memo;\n      }, null);\n    }\n\n    return (\n      <div key={ key } className={ this.props.classes.node }>\n        <If\n          condition={ !node }\n          render={ ()=>\n            <React.Fragment>\n              Empty room!\n            </React.Fragment> }\n          />\n        <If\n          condition={ !!node }\n          render={ ()=>\n            <React.Fragment>\n              { this.props.cards[node.card] }\n            </React.Fragment> }\n          />\n\n        <If\n          condition={ !!isActionable }\n          render={ ()=>\n            <Button onClick={ partial(this.sendAction, isActionable) }>\n              { isActionable.action }\n            </Button> }\n          />\n      </div>\n    );\n  }\n}\n\nconst mapToProps = obstruction({\n  selectedCard: 'game.selectedCard',\n  actions: 'game.actions',\n  playerId: 'global.playerId',\n  castles: 'game.castles',\n  cards: 'cards.knownCards',\n});\n\nexport default withStyles(styles)(connect(mapToProps)(GridController));\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport obstruction from 'obstruction';\nimport { partial } from 'ap';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport { selectCard } from '../../actions/player';\n\nconst styles = theme => ({\n  root: {\n  },\n  card: {\n    display: 'inline-block'\n  }\n});\n\nclass Shop extends Component {\n  constructor () {\n    super();\n\n    this.renderCard = this.renderCard.bind(this);\n    this.selectCard = this.selectCard.bind(this);\n  }\n\n  selectCard (card) {\n    this.props.dispatch(selectCard(card));\n  }\n\n  render () {\n    let shop = this.props.shop || [];\n\n    return (\n      <div>\n        { shop.map(this.renderCard) }\n      </div>\n    );\n  }\n\n  renderCard (card) {\n    var isClickable = false;\n    this.props.actions.forEach(function (action) {\n      if (action.action == 'BuildRoom' && action.card === card) {\n        isClickable = true;\n      }\n    })\n    console.log(card);\n    if (isClickable) {\n      return (\n        <Button\n          onClick={ partial(this.selectCard, card) }\n          key={ card }>\n          { this.props.cards[card] }\n        </Button>\n      );\n    }\n    return (\n      <Button disabled key={ card }>\n        { this.props.cards[card] }\n      </Button>\n    );\n  }\n}\n\nconst mapToProps = obstruction({\n  cards: 'cards.knownCards',\n  actions: 'game.actions',\n  shop: 'game.shop'\n});\n\nexport default withStyles(styles)(connect(mapToProps)(Shop));\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport obstruction from 'obstruction';\nimport { partial } from 'ap';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport API from '../../api';\n\nconst styles = theme => ({\n  root: {\n  }\n});\n\nclass ActionBar extends Component {\n  constructor () {\n    super();\n\n    this.state = {\n      actions: []\n    };\n\n    this.sendAction = this.sendAction.bind(this);\n    this.renderAction = this.renderAction.bind(this);\n  }\n\n  componentWillReceiveProps (newProps) {\n    console.log('actions for actions', newProps.actions);\n    this.setState({\n      actions: newProps.actions.filter((action) => {\n        switch (action.action) {\n          case 'SkipText':\n          case 'SkipTurn':\n          case 'SkipMultiChoice':\n          case 'UnmarkRooms':\n          case 'AcceptSacrifice':\n            return true;\n          default:\n            return false;\n        }\n      })\n    });\n  }\n\n  sendAction (action) {\n    API.send(action);\n  }\n\n  render () {\n    return (\n      <div>\n        { this.state.actions.map(this.renderAction) }\n      </div>\n    );\n  }\n\n  renderAction (action) {\n    return (\n      <Button key={ action.action } variant=\"contained\" onClick={ partial(this.sendAction, action)}>\n        { action.action }\n      </Button>\n    );\n  }\n}\n\nconst mapToProps = obstruction({\n  actions: 'game.actions',\n});\n\nexport default withStyles(styles)(connect(mapToProps)(ActionBar));\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport obstruction from 'obstruction';\n\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  root: {\n  }\n});\n\nclass Minimap extends Component {\n  constructor () {\n    super();\n  }\n  render () {\n    return (\n      <div>\n      this is a minimap!\n      </div>\n    );\n  }\n}\n\nconst mapToProps = obstruction({\n});\n\nexport default withStyles(styles)(connect(mapToProps)(Minimap));\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport obstruction from 'obstruction';\n\nimport Typography from '@material-ui/core/Typography';\n\nimport API from '../../api';\n\nimport GridController from './grid';\nimport Shop from './shop';\nimport ActionBar from './actions';\nimport Minimap from './minimap';\n\nimport backgroundImage1 from '../backgrounds/BG1.png';\nimport backgroundImage2 from '../backgrounds/BG2.png';\nimport backgroundImage3 from '../backgrounds/BG3.png';\nimport backgroundImage4 from '../backgrounds/BG4.png';\nimport backgroundImage5 from '../backgrounds/BG5.png';\n\nconst backgroundImage = [\n  backgroundImage1,\n  backgroundImage2,\n  backgroundImage3,\n  backgroundImage4,\n  backgroundImage5\n][~~(Math.random() * 5)];\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    minHeight: '100%',\n    backgroundImage: 'url(' + backgroundImage + ')',\n    backgroundSize: 'cover'\n  }\n});\n\nclass GameComponent extends Component {\n  constructor () {\n    super();\n  }\n\n  componentWillMount () {\n    if (!this.props.inGame) {\n      API.reconnect(this.props.match.params.id);\n    }\n  }\n\n  render () {\n    return (\n      <div className={ this.props.classes.root }>\n        <Shop />\n        <ActionBar />\n        This is a game!\n        <GridController />\n        <Minimap />\n      </div>\n    );\n  }\n}\n\nconst mapToProps = obstruction({\n  inGame: 'game.inGame',\n});\n\nexport default withStyles(styles)(connect(mapToProps)(GameComponent));\n","import React, { Component } from 'react';\nimport { Redirect, Switch } from 'react-router';\nimport { HashRouter, Route } from 'react-router-dom';\nimport LobbyMenu from './components/lobby';\nimport LobbyView from './components/lobby/lobby';\nimport GameView from './components/game';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route\n            exact\n            path='/'\n            render={ ()=> <Redirect to='/lobby' /> } />\n          <Route exact path='/lobby' component={ LobbyMenu } />\n          <Route path='/lobby/:id' component={ LobbyView } />\n          <Route path='/game/:id' component={ GameView } />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.Fragment>\n      <CssBaseline />\n      <App />\n    </React.Fragment>\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}